from flask import render_template
from flask import Flask, request, jsonify, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, logout_user
from flask_login import current_user


app = Flask(__name__)
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///db.sqlite"
app.config["SECRET_KEY"] = "abc"
db = SQLAlchemy()

login_manager = LoginManager()
login_manager.init_app(app)

class Users(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(250), unique=True, nullable=False)
    password = db.Column(db.String(250), nullable=False)

db.init_app(app)

with app.app_context():
    db.create_all()
    

@login_manager.user_loader
def loader_user(user_id):
    return Users.query.get(user_id)


from flask import request, redirect, url_for

# ...

@app.route('/', methods=["GET", "POST"])
def register():
    if request.method == "POST":
        username = request.form.get("username")
        password = request.form.get("password")
        
        if not username or not password:
            return jsonify({"message": "Username and password are required"}), 400#bad request

        user = Users(username=username, password=password)
        db.session.add(user)
        db.session.commit()
        return redirect(url_for('login'))
    return render_template('register.html')




@app.route("/login", methods=["GET","POST"])
def login():
    if request.method == "POST":
        username = request.form.get("username")
        password = request.form.get("password")
        user = Users.query.filter_by(username=username).first()
        if user and user.password == password:
            login_user(user)
            return jsonify({"message": "Login successful"}), 200#HTTP status codes are like messages your web browser gets from a website. 
        #They tell you if things went well or if there's a problem
        
        else:
            return jsonify({"message": "Invalid username or password"}), 401#unauthorized=cant run without permission
    return render_template('login.html')

@app.route("/logout", methods=['GET'])
def logout():
    if current_user.is_authenticated:
        
        db.session.delete(current_user)
        db.session.commit()
        logout_user()
        return render_template('logout.html', message="Logged out successfully and user data deleted")
    else:
        return jsonify({"message": "User is not logged in"}), 401

if __name__ == "__main__":
    app.run(debug=True)